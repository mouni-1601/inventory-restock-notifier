{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/api/auth';\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(loginData) {\n      return this.http.post(`${this.apiUrl}/login`, loginData).pipe(map(response => {\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\n        localStorage.setItem('token', response.token);\n        this.currentUserSubject.next(response.user);\n        return response;\n      }));\n    }\n    register(registerData) {\n      return this.http.post(`${this.apiUrl}/register`, registerData);\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      localStorage.removeItem('token');\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}